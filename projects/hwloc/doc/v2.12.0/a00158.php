<?php
$topdir = "../../../..";
# Note that we must use the PHP "$$" indirection to assign to the
# "title" variable, because if we list "$ title" (without the space)
# in this file, Doxygen will replace it with a string title.
$ver = basename(getcwd());
$thwarting_doxygen_preprocessor = "title";
$$thwarting_doxygen_preprocessor = "Portable Hardware Locality (hwloc) Documentation: $ver";
$header_include_file = "$topdir/projects/hwloc/doc/$ver/www.open-mpi.org-css.inc";
include_once("$topdir/projects/hwloc/nav.inc");
include_once("$topdir/includes/header.inc");
include_once("$topdir/includes/code.inc");
?>
<!-- Generated by Doxygen 1.9.8 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',false,false,'search.php','Search');
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle"><div class="title">CPU and node sets of entire topologies</div></div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="func-members" name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:gaee30e03391c1ed7dfd617fb5c7bbb033" id="r_gaee30e03391c1ed7dfd617fb5c7bbb033"><td class="memItemLeft" align="right" valign="top"><a class="el" href="a00139.php#ga1f784433e9b606261f62d1134f6a3b25">hwloc_const_cpuset_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00158.php#gaee30e03391c1ed7dfd617fb5c7bbb033">hwloc_topology_get_complete_cpuset</a> (<a class="el" href="a00142.php#ga9d1e76ee15a7dee158b786c30b6a6e38">hwloc_topology_t</a> topology)</td></tr>
<tr class="separator:gaee30e03391c1ed7dfd617fb5c7bbb033"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga79212faa07b70dd26588941b17d9fa82" id="r_ga79212faa07b70dd26588941b17d9fa82"><td class="memItemLeft" align="right" valign="top"><a class="el" href="a00139.php#ga1f784433e9b606261f62d1134f6a3b25">hwloc_const_cpuset_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00158.php#ga79212faa07b70dd26588941b17d9fa82">hwloc_topology_get_topology_cpuset</a> (<a class="el" href="a00142.php#ga9d1e76ee15a7dee158b786c30b6a6e38">hwloc_topology_t</a> topology)</td></tr>
<tr class="separator:ga79212faa07b70dd26588941b17d9fa82"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga517d5d68ec9f24583d8933aab713be8e" id="r_ga517d5d68ec9f24583d8933aab713be8e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="a00139.php#ga1f784433e9b606261f62d1134f6a3b25">hwloc_const_cpuset_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00158.php#ga517d5d68ec9f24583d8933aab713be8e">hwloc_topology_get_allowed_cpuset</a> (<a class="el" href="a00142.php#ga9d1e76ee15a7dee158b786c30b6a6e38">hwloc_topology_t</a> topology)</td></tr>
<tr class="separator:ga517d5d68ec9f24583d8933aab713be8e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga773fd98949461ef4c1e3170bb0c0418f" id="r_ga773fd98949461ef4c1e3170bb0c0418f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="a00139.php#ga2f5276235841ad66a79bedad16a5a10c">hwloc_const_nodeset_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00158.php#ga773fd98949461ef4c1e3170bb0c0418f">hwloc_topology_get_complete_nodeset</a> (<a class="el" href="a00142.php#ga9d1e76ee15a7dee158b786c30b6a6e38">hwloc_topology_t</a> topology)</td></tr>
<tr class="separator:ga773fd98949461ef4c1e3170bb0c0418f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3fd37303e99ace8b0d0ea03f95f8c514" id="r_ga3fd37303e99ace8b0d0ea03f95f8c514"><td class="memItemLeft" align="right" valign="top"><a class="el" href="a00139.php#ga2f5276235841ad66a79bedad16a5a10c">hwloc_const_nodeset_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00158.php#ga3fd37303e99ace8b0d0ea03f95f8c514">hwloc_topology_get_topology_nodeset</a> (<a class="el" href="a00142.php#ga9d1e76ee15a7dee158b786c30b6a6e38">hwloc_topology_t</a> topology)</td></tr>
<tr class="separator:ga3fd37303e99ace8b0d0ea03f95f8c514"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga21a4d7237a11e76b912ed4524ab78cbd" id="r_ga21a4d7237a11e76b912ed4524ab78cbd"><td class="memItemLeft" align="right" valign="top"><a class="el" href="a00139.php#ga2f5276235841ad66a79bedad16a5a10c">hwloc_const_nodeset_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00158.php#ga21a4d7237a11e76b912ed4524ab78cbd">hwloc_topology_get_allowed_nodeset</a> (<a class="el" href="a00142.php#ga9d1e76ee15a7dee158b786c30b6a6e38">hwloc_topology_t</a> topology)</td></tr>
<tr class="separator:ga21a4d7237a11e76b912ed4524ab78cbd"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<h2 class="groupheader">Function Documentation</h2>
<a id="ga517d5d68ec9f24583d8933aab713be8e" name="ga517d5d68ec9f24583d8933aab713be8e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga517d5d68ec9f24583d8933aab713be8e">&#9670;&#160;</a></span>hwloc_topology_get_allowed_cpuset()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="a00139.php#ga1f784433e9b606261f62d1134f6a3b25">hwloc_const_cpuset_t</a> hwloc_topology_get_allowed_cpuset </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="a00142.php#ga9d1e76ee15a7dee158b786c30b6a6e38">hwloc_topology_t</a>&#160;</td>
          <td class="paramname"><em>topology</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get allowed CPU set. </p>
<dl class="section return"><dt>Returns</dt><dd>the CPU set of allowed processors of the system.</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function cannot return <code>NULL</code>.</dd>
<dd>
If the topology flag <a class="el" href="a00149.php#ggada025d3ec20b4b420f8038d23d6e7bdea10907044bbb306fd0dc76acf046d9258" title="Detect the whole system, ignore reservations, include disallowed objects.">HWLOC_TOPOLOGY_FLAG_INCLUDE_DISALLOWED</a> was not set, this is identical to <a class="el" href="a00158.php#ga79212faa07b70dd26588941b17d9fa82" title="Get topology CPU set.">hwloc_topology_get_topology_cpuset()</a>, which means all PUs are allowed.</dd>
<dd>
If <a class="el" href="a00149.php#ggada025d3ec20b4b420f8038d23d6e7bdea10907044bbb306fd0dc76acf046d9258" title="Detect the whole system, ignore reservations, include disallowed objects.">HWLOC_TOPOLOGY_FLAG_INCLUDE_DISALLOWED</a> was set, applying <a class="el" href="a00161.php#gaefa070f9232857ba5a57297ea9a08ea2" title="Test whether bitmaps bitmap1 and bitmap2 intersects.">hwloc_bitmap_intersects()</a> on the result of this function and on an object cpuset checks whether there are allowed PUs inside that object. Applying <a class="el" href="a00161.php#ga674533016ffed922a28b4f0b49b82cd4" title="And bitmaps bitmap1 and bitmap2 and store the result in bitmap res.">hwloc_bitmap_and()</a> returns the list of these allowed PUs.</dd>
<dd>
The returned cpuset is not newly allocated and should thus not be changed or freed, <a class="el" href="a00161.php#gae679434c1a5f41d3560a8a7e2c1b0dee" title="Duplicate bitmap bitmap by allocating a new bitmap and copying bitmap contents.">hwloc_bitmap_dup()</a> must be used to obtain a local copy. </dd></dl>

</div>
</div>
<a id="ga21a4d7237a11e76b912ed4524ab78cbd" name="ga21a4d7237a11e76b912ed4524ab78cbd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga21a4d7237a11e76b912ed4524ab78cbd">&#9670;&#160;</a></span>hwloc_topology_get_allowed_nodeset()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="a00139.php#ga2f5276235841ad66a79bedad16a5a10c">hwloc_const_nodeset_t</a> hwloc_topology_get_allowed_nodeset </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="a00142.php#ga9d1e76ee15a7dee158b786c30b6a6e38">hwloc_topology_t</a>&#160;</td>
          <td class="paramname"><em>topology</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get allowed node set. </p>
<dl class="section return"><dt>Returns</dt><dd>the node set of allowed memory of the system.</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function cannot return <code>NULL</code>.</dd>
<dd>
If the topology flag <a class="el" href="a00149.php#ggada025d3ec20b4b420f8038d23d6e7bdea10907044bbb306fd0dc76acf046d9258" title="Detect the whole system, ignore reservations, include disallowed objects.">HWLOC_TOPOLOGY_FLAG_INCLUDE_DISALLOWED</a> was not set, this is identical to <a class="el" href="a00158.php#ga3fd37303e99ace8b0d0ea03f95f8c514" title="Get topology node set.">hwloc_topology_get_topology_nodeset()</a>, which means all NUMA nodes are allowed.</dd>
<dd>
If <a class="el" href="a00149.php#ggada025d3ec20b4b420f8038d23d6e7bdea10907044bbb306fd0dc76acf046d9258" title="Detect the whole system, ignore reservations, include disallowed objects.">HWLOC_TOPOLOGY_FLAG_INCLUDE_DISALLOWED</a> was set, applying <a class="el" href="a00161.php#gaefa070f9232857ba5a57297ea9a08ea2" title="Test whether bitmaps bitmap1 and bitmap2 intersects.">hwloc_bitmap_intersects()</a> on the result of this function and on an object nodeset checks whether there are allowed NUMA nodes inside that object. Applying <a class="el" href="a00161.php#ga674533016ffed922a28b4f0b49b82cd4" title="And bitmaps bitmap1 and bitmap2 and store the result in bitmap res.">hwloc_bitmap_and()</a> returns the list of these allowed NUMA nodes.</dd>
<dd>
The returned nodeset is not newly allocated and should thus not be changed or freed, <a class="el" href="a00161.php#gae679434c1a5f41d3560a8a7e2c1b0dee" title="Duplicate bitmap bitmap by allocating a new bitmap and copying bitmap contents.">hwloc_bitmap_dup()</a> must be used to obtain a local copy. </dd></dl>

</div>
</div>
<a id="gaee30e03391c1ed7dfd617fb5c7bbb033" name="gaee30e03391c1ed7dfd617fb5c7bbb033"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaee30e03391c1ed7dfd617fb5c7bbb033">&#9670;&#160;</a></span>hwloc_topology_get_complete_cpuset()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="a00139.php#ga1f784433e9b606261f62d1134f6a3b25">hwloc_const_cpuset_t</a> hwloc_topology_get_complete_cpuset </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="a00142.php#ga9d1e76ee15a7dee158b786c30b6a6e38">hwloc_topology_t</a>&#160;</td>
          <td class="paramname"><em>topology</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get complete CPU set. </p>
<dl class="section return"><dt>Returns</dt><dd>the complete CPU set of processors of the system.</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function cannot return <code>NULL</code>.</dd>
<dd>
The returned cpuset is not newly allocated and should thus not be changed or freed; <a class="el" href="a00161.php#gae679434c1a5f41d3560a8a7e2c1b0dee" title="Duplicate bitmap bitmap by allocating a new bitmap and copying bitmap contents.">hwloc_bitmap_dup()</a> must be used to obtain a local copy.</dd>
<dd>
This is equivalent to retrieving the root object complete CPU-set. </dd></dl>

</div>
</div>
<a id="ga773fd98949461ef4c1e3170bb0c0418f" name="ga773fd98949461ef4c1e3170bb0c0418f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga773fd98949461ef4c1e3170bb0c0418f">&#9670;&#160;</a></span>hwloc_topology_get_complete_nodeset()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="a00139.php#ga2f5276235841ad66a79bedad16a5a10c">hwloc_const_nodeset_t</a> hwloc_topology_get_complete_nodeset </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="a00142.php#ga9d1e76ee15a7dee158b786c30b6a6e38">hwloc_topology_t</a>&#160;</td>
          <td class="paramname"><em>topology</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get complete node set. </p>
<dl class="section return"><dt>Returns</dt><dd>the complete node set of memory of the system.</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function cannot return <code>NULL</code>.</dd>
<dd>
The returned nodeset is not newly allocated and should thus not be changed or freed; <a class="el" href="a00161.php#gae679434c1a5f41d3560a8a7e2c1b0dee" title="Duplicate bitmap bitmap by allocating a new bitmap and copying bitmap contents.">hwloc_bitmap_dup()</a> must be used to obtain a local copy.</dd>
<dd>
This is equivalent to retrieving the root object complete nodeset. </dd></dl>

</div>
</div>
<a id="ga79212faa07b70dd26588941b17d9fa82" name="ga79212faa07b70dd26588941b17d9fa82"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga79212faa07b70dd26588941b17d9fa82">&#9670;&#160;</a></span>hwloc_topology_get_topology_cpuset()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="a00139.php#ga1f784433e9b606261f62d1134f6a3b25">hwloc_const_cpuset_t</a> hwloc_topology_get_topology_cpuset </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="a00142.php#ga9d1e76ee15a7dee158b786c30b6a6e38">hwloc_topology_t</a>&#160;</td>
          <td class="paramname"><em>topology</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get topology CPU set. </p>
<dl class="section return"><dt>Returns</dt><dd>the CPU set of processors of the system for which hwloc provides topology information. This is equivalent to the cpuset of the system object.</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function cannot return <code>NULL</code>.</dd>
<dd>
The returned cpuset is not newly allocated and should thus not be changed or freed; <a class="el" href="a00161.php#gae679434c1a5f41d3560a8a7e2c1b0dee" title="Duplicate bitmap bitmap by allocating a new bitmap and copying bitmap contents.">hwloc_bitmap_dup()</a> must be used to obtain a local copy.</dd>
<dd>
This is equivalent to retrieving the root object CPU-set. </dd></dl>

</div>
</div>
<a id="ga3fd37303e99ace8b0d0ea03f95f8c514" name="ga3fd37303e99ace8b0d0ea03f95f8c514"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga3fd37303e99ace8b0d0ea03f95f8c514">&#9670;&#160;</a></span>hwloc_topology_get_topology_nodeset()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="a00139.php#ga2f5276235841ad66a79bedad16a5a10c">hwloc_const_nodeset_t</a> hwloc_topology_get_topology_nodeset </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="a00142.php#ga9d1e76ee15a7dee158b786c30b6a6e38">hwloc_topology_t</a>&#160;</td>
          <td class="paramname"><em>topology</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get topology node set. </p>
<dl class="section return"><dt>Returns</dt><dd>the node set of memory of the system for which hwloc provides topology information. This is equivalent to the nodeset of the system object.</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function cannot return <code>NULL</code>.</dd>
<dd>
The returned nodeset is not newly allocated and should thus not be changed or freed; <a class="el" href="a00161.php#gae679434c1a5f41d3560a8a7e2c1b0dee" title="Duplicate bitmap bitmap by allocating a new bitmap and copying bitmap contents.">hwloc_bitmap_dup()</a> must be used to obtain a local copy.</dd>
<dd>
This is equivalent to retrieving the root object nodeset. </dd></dl>

</div>
</div>
</div><!-- contents -->
<?php
include_once("$topdir/includes/footer.inc");
