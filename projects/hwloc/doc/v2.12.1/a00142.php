<?php
$topdir = "../../../..";
# Note that we must use the PHP "$$" indirection to assign to the
# "title" variable, because if we list "$ title" (without the space)
# in this file, Doxygen will replace it with a string title.
$ver = basename(getcwd());
$thwarting_doxygen_preprocessor = "title";
$$thwarting_doxygen_preprocessor = "Portable Hardware Locality (hwloc) Documentation: $ver";
$header_include_file = "$topdir/projects/hwloc/doc/$ver/www.open-mpi.org-css.inc";
include_once("$topdir/projects/hwloc/nav.inc");
include_once("$topdir/includes/header.inc");
include_once("$topdir/includes/code.inc");
?>
<!-- Generated by Doxygen 1.9.8 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',false,false,'search.php','Search');
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#typedef-members">Typedefs</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle"><div class="title">Topology Creation and Destruction</div></div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="typedef-members" name="typedef-members"></a>
Typedefs</h2></td></tr>
<tr class="memitem:ga9d1e76ee15a7dee158b786c30b6a6e38" id="r_ga9d1e76ee15a7dee158b786c30b6a6e38"><td class="memItemLeft" align="right" valign="top">typedef struct hwloc_topology *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00142.php#ga9d1e76ee15a7dee158b786c30b6a6e38">hwloc_topology_t</a></td></tr>
<tr class="separator:ga9d1e76ee15a7dee158b786c30b6a6e38"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="func-members" name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:ga03fd4a16d8b9ee1ffc32b25fd2f6bdfa" id="r_ga03fd4a16d8b9ee1ffc32b25fd2f6bdfa"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00142.php#ga03fd4a16d8b9ee1ffc32b25fd2f6bdfa">hwloc_topology_init</a> (<a class="el" href="a00142.php#ga9d1e76ee15a7dee158b786c30b6a6e38">hwloc_topology_t</a> *topologyp)</td></tr>
<tr class="separator:ga03fd4a16d8b9ee1ffc32b25fd2f6bdfa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gabdf58d87ad77f6615fccdfe0535ff826" id="r_gabdf58d87ad77f6615fccdfe0535ff826"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00142.php#gabdf58d87ad77f6615fccdfe0535ff826">hwloc_topology_load</a> (<a class="el" href="a00142.php#ga9d1e76ee15a7dee158b786c30b6a6e38">hwloc_topology_t</a> topology)</td></tr>
<tr class="separator:gabdf58d87ad77f6615fccdfe0535ff826"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9f34a640b6fd28d23699d4d084667b15" id="r_ga9f34a640b6fd28d23699d4d084667b15"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00142.php#ga9f34a640b6fd28d23699d4d084667b15">hwloc_topology_destroy</a> (<a class="el" href="a00142.php#ga9d1e76ee15a7dee158b786c30b6a6e38">hwloc_topology_t</a> topology)</td></tr>
<tr class="separator:ga9f34a640b6fd28d23699d4d084667b15"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga62a161fc5e6f120344dc69a7bee4e587" id="r_ga62a161fc5e6f120344dc69a7bee4e587"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00142.php#ga62a161fc5e6f120344dc69a7bee4e587">hwloc_topology_dup</a> (<a class="el" href="a00142.php#ga9d1e76ee15a7dee158b786c30b6a6e38">hwloc_topology_t</a> *newtopology, <a class="el" href="a00142.php#ga9d1e76ee15a7dee158b786c30b6a6e38">hwloc_topology_t</a> oldtopology)</td></tr>
<tr class="separator:ga62a161fc5e6f120344dc69a7bee4e587"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0647ae66458fe68172eb5a320042f870" id="r_ga0647ae66458fe68172eb5a320042f870"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00142.php#ga0647ae66458fe68172eb5a320042f870">hwloc_topology_abi_check</a> (<a class="el" href="a00142.php#ga9d1e76ee15a7dee158b786c30b6a6e38">hwloc_topology_t</a> topology)</td></tr>
<tr class="separator:ga0647ae66458fe68172eb5a320042f870"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf6746bc3a558ef1ac8348b4491d091b5" id="r_gaf6746bc3a558ef1ac8348b4491d091b5"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00142.php#gaf6746bc3a558ef1ac8348b4491d091b5">hwloc_topology_check</a> (<a class="el" href="a00142.php#ga9d1e76ee15a7dee158b786c30b6a6e38">hwloc_topology_t</a> topology)</td></tr>
<tr class="separator:gaf6746bc3a558ef1ac8348b4491d091b5"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<h2 class="groupheader">Typedef Documentation</h2>
<a id="ga9d1e76ee15a7dee158b786c30b6a6e38" name="ga9d1e76ee15a7dee158b786c30b6a6e38"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga9d1e76ee15a7dee158b786c30b6a6e38">&#9670;&#160;</a></span>hwloc_topology_t</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef struct hwloc_topology* <a class="el" href="a00142.php#ga9d1e76ee15a7dee158b786c30b6a6e38">hwloc_topology_t</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Topology context. </p>
<p>To be initialized with <a class="el" href="a00142.php#ga03fd4a16d8b9ee1ffc32b25fd2f6bdfa" title="Allocate a topology context.">hwloc_topology_init()</a> and built with <a class="el" href="a00142.php#gabdf58d87ad77f6615fccdfe0535ff826" title="Build the actual topology.">hwloc_topology_load()</a>. </p>

</div>
</div>
<h2 class="groupheader">Function Documentation</h2>
<a id="ga0647ae66458fe68172eb5a320042f870" name="ga0647ae66458fe68172eb5a320042f870"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga0647ae66458fe68172eb5a320042f870">&#9670;&#160;</a></span>hwloc_topology_abi_check()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int hwloc_topology_abi_check </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="a00142.php#ga9d1e76ee15a7dee158b786c30b6a6e38">hwloc_topology_t</a>&#160;</td>
          <td class="paramname"><em>topology</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Verify that the topology is compatible with the current hwloc library. </p>
<p>This is useful when using the same topology structure (in memory) in different libraries that may use different hwloc installations (for instance if one library embeds a specific version of hwloc, while another library uses a default system-wide hwloc installation).</p>
<p>If all libraries/programs use the same hwloc installation, this function always returns success.</p>
<dl class="section return"><dt>Returns</dt><dd><code>0</code> on success.</dd>
<dd>
<code>-1</code> with <code>errno</code> set to <code>EINVAL</code> if incompatible.</dd></dl>
<dl class="section note"><dt>Note</dt><dd>If sharing between processes with <a class="el" href="a00185.php#ga61b20e346fc76f76420e3a88cc80a671" title="Duplicate a topology to a shared memory file.">hwloc_shmem_topology_write()</a>, the relevant check is already performed inside <a class="el" href="a00185.php#ga21545bd0f09d9b554c8e60a630e0e629" title="Adopt a shared memory topology stored in a file.">hwloc_shmem_topology_adopt()</a>. </dd></dl>

</div>
</div>
<a id="gaf6746bc3a558ef1ac8348b4491d091b5" name="gaf6746bc3a558ef1ac8348b4491d091b5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaf6746bc3a558ef1ac8348b4491d091b5">&#9670;&#160;</a></span>hwloc_topology_check()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void hwloc_topology_check </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="a00142.php#ga9d1e76ee15a7dee158b786c30b6a6e38">hwloc_topology_t</a>&#160;</td>
          <td class="paramname"><em>topology</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Run internal checks on a topology structure. </p>
<p>The program aborts if an inconsistency is detected in the given topology.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">topology</td><td>is the topology to be checked</td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd>This routine is only useful to developers.</dd>
<dd>
The input topology should have been previously loaded with <a class="el" href="a00142.php#gabdf58d87ad77f6615fccdfe0535ff826" title="Build the actual topology.">hwloc_topology_load()</a>. </dd></dl>

</div>
</div>
<a id="ga9f34a640b6fd28d23699d4d084667b15" name="ga9f34a640b6fd28d23699d4d084667b15"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga9f34a640b6fd28d23699d4d084667b15">&#9670;&#160;</a></span>hwloc_topology_destroy()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void hwloc_topology_destroy </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="a00142.php#ga9d1e76ee15a7dee158b786c30b6a6e38">hwloc_topology_t</a>&#160;</td>
          <td class="paramname"><em>topology</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Terminate and free a topology context. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">topology</td><td>is the topology to be freed </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ga62a161fc5e6f120344dc69a7bee4e587" name="ga62a161fc5e6f120344dc69a7bee4e587"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga62a161fc5e6f120344dc69a7bee4e587">&#9670;&#160;</a></span>hwloc_topology_dup()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int hwloc_topology_dup </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="a00142.php#ga9d1e76ee15a7dee158b786c30b6a6e38">hwloc_topology_t</a> *&#160;</td>
          <td class="paramname"><em>newtopology</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="a00142.php#ga9d1e76ee15a7dee158b786c30b6a6e38">hwloc_topology_t</a>&#160;</td>
          <td class="paramname"><em>oldtopology</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Duplicate a topology. </p>
<p>The entire topology structure as well as its objects are duplicated into a new one.</p>
<p>This is useful for keeping a backup while modifying a topology.</p>
<dl class="section return"><dt>Returns</dt><dd>0 on success, -1 on error.</dd></dl>
<dl class="section note"><dt>Note</dt><dd>Object userdata is not duplicated since hwloc does not know what it point to. The objects of both old and new topologies will point to the same userdata. </dd></dl>

</div>
</div>
<a id="ga03fd4a16d8b9ee1ffc32b25fd2f6bdfa" name="ga03fd4a16d8b9ee1ffc32b25fd2f6bdfa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga03fd4a16d8b9ee1ffc32b25fd2f6bdfa">&#9670;&#160;</a></span>hwloc_topology_init()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int hwloc_topology_init </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="a00142.php#ga9d1e76ee15a7dee158b786c30b6a6e38">hwloc_topology_t</a> *&#160;</td>
          <td class="paramname"><em>topologyp</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Allocate a topology context. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">topologyp</td><td>is assigned a pointer to the new allocated context.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>0 on success, -1 on error. </dd></dl>

</div>
</div>
<a id="gabdf58d87ad77f6615fccdfe0535ff826" name="gabdf58d87ad77f6615fccdfe0535ff826"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gabdf58d87ad77f6615fccdfe0535ff826">&#9670;&#160;</a></span>hwloc_topology_load()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int hwloc_topology_load </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="a00142.php#ga9d1e76ee15a7dee158b786c30b6a6e38">hwloc_topology_t</a>&#160;</td>
          <td class="paramname"><em>topology</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Build the actual topology. </p>
<p>Build the actual topology once initialized with <a class="el" href="a00142.php#ga03fd4a16d8b9ee1ffc32b25fd2f6bdfa" title="Allocate a topology context.">hwloc_topology_init()</a> and tuned with <a class="el" href="a00149.php">Topology Detection Configuration and Query</a> and <a class="el" href="a00148.php">Changing the Source of Topology Discovery</a> routines. No other routine may be called earlier using this topology context.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">topology</td><td>is the topology to be loaded with objects.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>0 on success, -1 on error.</dd></dl>
<dl class="section note"><dt>Note</dt><dd>On failure, the topology is reinitialized. It should be either destroyed with <a class="el" href="a00142.php#ga9f34a640b6fd28d23699d4d084667b15" title="Terminate and free a topology context.">hwloc_topology_destroy()</a> or configured and loaded again.</dd>
<dd>
This function may be called only once per topology.</dd>
<dd>
The binding of the current thread or process may temporarily change during this call but it will be restored before it returns.</dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="a00149.php">Topology Detection Configuration and Query</a> and <a class="el" href="a00148.php">Changing the Source of Topology Discovery</a> </dd></dl>

</div>
</div>
</div><!-- contents -->
<?php
include_once("$topdir/includes/footer.inc");
