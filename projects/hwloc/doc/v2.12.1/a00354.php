<?php
$topdir = "../../../..";
# Note that we must use the PHP "$$" indirection to assign to the
# "title" variable, because if we list "$ title" (without the space)
# in this file, Doxygen will replace it with a string title.
$ver = basename(getcwd());
$thwarting_doxygen_preprocessor = "title";
$$thwarting_doxygen_preprocessor = "Portable Hardware Locality (hwloc) Documentation: $ver";
$header_include_file = "$topdir/projects/hwloc/doc/$ver/www.open-mpi.org-css.inc";
include_once("$topdir/projects/hwloc/nav.inc");
include_once("$topdir/includes/header.inc");
include_once("$topdir/includes/code.inc");
?>
<!-- Generated by Doxygen 1.9.8 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',false,false,'search.php','Search');
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div><div class="header">
  <div class="headertitle"><div class="title">Interoperability With Other Software</div></div>
</div><!--header-->
<div class="contents">
<div class="textblock"><p>Although hwloc offers its own portable interface, it still may have to interoperate with specific or non-portable libraries that manipulate similar kinds of objects. hwloc therefore offers several specific "helpers" to assist converting between those specific interfaces and hwloc.</p>
<p>Some external libraries may be specific to a particular OS; others may not always be available. The hwloc core therefore generally does not explicitly depend on these types of libraries. However, when a custom application uses or otherwise depends on such a library, it may optionally include the corresponding hwloc helper to extend the hwloc interface with dedicated helpers.</p>
<p>Most of these helpers use structures that are specific to these external libraries and only meaningful on the local machine. If so, the helper requires the input topology to match the current machine. Some helpers also require I/O device discovery to be supported and enabled for the current topology.</p>
<dl>
<dt>Linux specific features </dt>
<dd><p class="startdd"><a class="el" href="a00092_source.php">hwloc/linux.h</a> offers Linux-specific helpers that utilize some non-portable features of the Linux system, such as binding threads through their thread ID ("tid") or parsing kernel CPU mask files. See <a class="el" href="a00171.php">Linux-specific helpers</a>. </p>
<p class="enddd"></p>
</dd>
<dt>Windows specific features </dt>
<dd><p class="startdd"><a class="el" href="a00098_source.php">hwloc/windows.h</a> offers Windows-specific helpers to query information about Windows processor groups. See <a class="el" href="a00174.php">Windows-specific helpers</a>. </p>
<p class="enddd"></p>
</dd>
<dt>Linux libnuma </dt>
<dd><p class="startdd"><a class="el" href="a00095_source.php">hwloc/linux-libnuma.h</a> provides conversion helpers between hwloc CPU sets and libnuma-specific types, such as bitmasks. It helps you use libnuma memory-binding functions with hwloc CPU sets. See <a class="el" href="a00173.php">Interoperability with Linux libnuma bitmask</a> and <a class="el" href="a00172.php">Interoperability with Linux libnuma unsigned long masks</a>. </p>
<p class="enddd"></p>
</dd>
<dt>Glibc </dt>
<dd><p class="startdd"><a class="el" href="a00101_source.php">hwloc/glibc-sched.h</a> offers conversion routines between Glibc and hwloc CPU sets in order to use hwloc with functions such as sched_getaffinity() or pthread_attr_setaffinity_np(). See <a class="el" href="a00175.php">Interoperability with glibc sched affinity</a>. </p>
<p class="enddd"></p>
</dd>
<dt>OpenFabrics Verbs </dt>
<dd><p class="startdd"><a class="el" href="a00125_source.php">hwloc/openfabrics-verbs.h</a> helps interoperability with the OpenFabrics Verbs interface. For example, it can return a list of processors near an OpenFabrics device. It may also return the corresponding OS device hwloc object for further information (if I/O device discovery is enabled). See <a class="el" href="a00183.php">Interoperability with OpenFabrics</a>. </p>
<p class="enddd"></p>
</dd>
<dt>OpenCL </dt>
<dd><p class="startdd"><a class="el" href="a00104_source.php">hwloc/opencl.h</a> enables interoperability with the OpenCL interface. Only the AMD and NVIDIA implementations currently offer locality information. It may return the list of processors near a GPU given as a <code>cl_device_id</code>. It may also return the corresponding OS device hwloc object for further information (if I/O device discovery is enabled). See <a class="el" href="a00176.php">Interoperability with OpenCL</a>. </p>
<p class="enddd"></p>
</dd>
<dt>oneAPI Level Zero </dt>
<dd><p class="startdd"><a class="el" href="a00119_source.php">hwloc/levelzero.h</a> enables interoperability with the oneAPI Level Zero interface. It may return the list of processors near an accelerator or GPU. It may also return the corresponding OS device hwloc object for further information (if I/O device discovery is enabled). See <a class="el" href="a00181.php">Interoperability with the oneAPI Level Zero interface.</a>. </p>
<p class="enddd"></p>
</dd>
<dt>AMD ROCm SMI Library (RSMI) </dt>
<dd><p class="startdd"><a class="el" href="a00116_source.php">hwloc/rsmi.h</a> enables interoperability with the AMD ROCm SMI interface. It may return the list of processors near an AMD GPU. It may also return the corresponding OS device hwloc object for further information (if I/O device discovery is enabled). See <a class="el" href="a00180.php">Interoperability with the ROCm SMI Management Library</a>. </p>
<p class="enddd"></p>
</dd>
<dt>NVIDIA CUDA </dt>
<dd><p class="startdd"><a class="el" href="a00107_source.php">hwloc/cuda.h</a> and <a class="el" href="a00110_source.php">hwloc/cudart.h</a> enable interoperability with NVIDIA CUDA Driver and Runtime interfaces. For instance, it may return the list of processors near NVIDIA GPUs. It may also return the corresponding OS device hwloc object for further information (if I/O device discovery is enabled). See <a class="el" href="a00177.php">Interoperability with the CUDA Driver API</a> and <a class="el" href="a00178.php">Interoperability with the CUDA Runtime API</a>. </p>
<p class="enddd"></p>
</dd>
<dt>NVIDIA Management Library (NVML) </dt>
<dd><p class="startdd"><a class="el" href="a00113_source.php">hwloc/nvml.h</a> enables interoperability with the NVIDIA NVML interface. It may return the list of processors near a NVIDIA GPU given as a <code>nvmlDevice_t</code>. It may also return the corresponding OS device hwloc object for further information (if I/O device discovery is enabled). See <a class="el" href="a00179.php">Interoperability with the NVIDIA Management Library</a>. </p>
<p class="enddd"></p>
</dd>
<dt>NVIDIA displays </dt>
<dd><p class="startdd"><a class="el" href="a00122_source.php">hwloc/gl.h</a> enables interoperability with NVIDIA displays using the NV-CONTROL X extension (NVCtrl library). If I/O device discovery is enabled, it may return the OS device hwloc object that corresponds to a display given as a name such as <em>:0.0</em> or given as a port/device pair (server/screen). See <a class="el" href="a00182.php">Interoperability with OpenGL displays</a>. </p>
<p class="enddd"></p>
</dd>
<dt>Taskset command-line tool </dt>
<dd><p class="startdd">The taskset command-line tool is widely used for binding processes. It manipulates CPU set strings in a format that is slightly different from hwloc's one (it does not divide the string in fixed-size subsets and separates them with commas). To ease interoperability, hwloc offers routines to convert hwloc CPU sets from/to taskset-specific string format. See for instance <a class="el" href="a00161.php#ga5beb68a987fe48e5c5edef06ab260e14" title="Stringify a bitmap in the taskset-specific format.">hwloc_bitmap_taskset_snprintf()</a> in <a class="el" href="a00161.php">The bitmap API</a>.</p>
<p class="interdd">Most hwloc command-line tools also support the option <code>--cpuset-output-format taskset</code> to manipulate taskset-specific strings. </p>
<p class="enddd"></p>
</dd>
</dl>
</div></div><!-- contents -->
</div><!-- PageDoc -->
<?php
include_once("$topdir/includes/footer.inc");
