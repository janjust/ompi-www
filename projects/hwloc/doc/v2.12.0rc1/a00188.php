<?php
$topdir = "../../../..";
# Note that we must use the PHP "$$" indirection to assign to the
# "title" variable, because if we list "$ title" (without the space)
# in this file, Doxygen will replace it with a string title.
$ver = basename(getcwd());
$thwarting_doxygen_preprocessor = "title";
$$thwarting_doxygen_preprocessor = "Portable Hardware Locality (hwloc) Documentation: $ver";
$header_include_file = "$topdir/projects/hwloc/doc/$ver/www.open-mpi.org-css.inc";
include_once("$topdir/projects/hwloc/nav.inc");
include_once("$topdir/includes/header.inc");
include_once("$topdir/includes/code.inc");
?>
<!-- Generated by Doxygen 1.9.8 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',false,false,'search.php','Search');
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#define-members">Macros</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle"><div class="title">Components and Plugins: Core functions to be used by components</div></div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="define-members" name="define-members"></a>
Macros</h2></td></tr>
<tr class="memitem:gafce07a2a959190a6c7126b321bef202f" id="r_gafce07a2a959190a6c7126b321bef202f"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00188.php#gafce07a2a959190a6c7126b321bef202f">HWLOC_SHOW_CRITICAL_ERRORS</a>()&#160;&#160;&#160;(<a class="el" href="a00188.php#gab527c1e0f243f057d31a724794ad9f88">hwloc_hide_errors</a>() &lt; 2)</td></tr>
<tr class="separator:gafce07a2a959190a6c7126b321bef202f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3e48b6ac00ed6a40aea975e23eddcdbb" id="r_ga3e48b6ac00ed6a40aea975e23eddcdbb"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00188.php#ga3e48b6ac00ed6a40aea975e23eddcdbb">HWLOC_SHOW_ALL_ERRORS</a>()&#160;&#160;&#160;(<a class="el" href="a00188.php#gab527c1e0f243f057d31a724794ad9f88">hwloc_hide_errors</a>() == 0)</td></tr>
<tr class="separator:ga3e48b6ac00ed6a40aea975e23eddcdbb"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="func-members" name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:gab527c1e0f243f057d31a724794ad9f88" id="r_gab527c1e0f243f057d31a724794ad9f88"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00188.php#gab527c1e0f243f057d31a724794ad9f88">hwloc_hide_errors</a> (void)</td></tr>
<tr class="separator:gab527c1e0f243f057d31a724794ad9f88"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1e105cfe3c8e77f34cc6df3841deebbc" id="r_ga1e105cfe3c8e77f34cc6df3841deebbc"><td class="memItemLeft" align="right" valign="top"><a class="el" href="a00141.php#ga79b8ab56877ef99ac59b833203391c7d">hwloc_obj_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00188.php#ga1e105cfe3c8e77f34cc6df3841deebbc">hwloc__insert_object_by_cpuset</a> (struct hwloc_topology *topology, <a class="el" href="a00141.php#ga79b8ab56877ef99ac59b833203391c7d">hwloc_obj_t</a> root, <a class="el" href="a00141.php#ga79b8ab56877ef99ac59b833203391c7d">hwloc_obj_t</a> obj, const char *reason)</td></tr>
<tr class="separator:ga1e105cfe3c8e77f34cc6df3841deebbc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0ef97debde503b56367689b07bb3e901" id="r_ga0ef97debde503b56367689b07bb3e901"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00188.php#ga0ef97debde503b56367689b07bb3e901">hwloc_insert_object_by_parent</a> (struct hwloc_topology *topology, <a class="el" href="a00141.php#ga79b8ab56877ef99ac59b833203391c7d">hwloc_obj_t</a> parent, <a class="el" href="a00141.php#ga79b8ab56877ef99ac59b833203391c7d">hwloc_obj_t</a> obj)</td></tr>
<tr class="separator:ga0ef97debde503b56367689b07bb3e901"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0b5c75b2dc37cea2e8a29c4812baf4b3" id="r_ga0b5c75b2dc37cea2e8a29c4812baf4b3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="a00141.php#ga79b8ab56877ef99ac59b833203391c7d">hwloc_obj_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00188.php#ga0b5c75b2dc37cea2e8a29c4812baf4b3">hwloc_alloc_setup_object</a> (<a class="el" href="a00142.php#ga9d1e76ee15a7dee158b786c30b6a6e38">hwloc_topology_t</a> topology, <a class="el" href="a00140.php#gacd37bb612667dc437d66bfb175a8dc55">hwloc_obj_type_t</a> type, unsigned os_index)</td></tr>
<tr class="separator:ga0b5c75b2dc37cea2e8a29c4812baf4b3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga754b61041ceee9685534a2c5d3cd0156" id="r_ga754b61041ceee9685534a2c5d3cd0156"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00188.php#ga754b61041ceee9685534a2c5d3cd0156">hwloc_obj_add_children_sets</a> (<a class="el" href="a00141.php#ga79b8ab56877ef99ac59b833203391c7d">hwloc_obj_t</a> obj)</td></tr>
<tr class="separator:ga754b61041ceee9685534a2c5d3cd0156"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga120d8bd74922e1030b621409a6b0be61" id="r_ga120d8bd74922e1030b621409a6b0be61"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00188.php#ga120d8bd74922e1030b621409a6b0be61">hwloc_topology_reconnect</a> (<a class="el" href="a00142.php#ga9d1e76ee15a7dee158b786c30b6a6e38">hwloc_topology_t</a> topology, unsigned long flags)</td></tr>
<tr class="separator:ga120d8bd74922e1030b621409a6b0be61"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<dl class="section note"><dt>Note</dt><dd>These structures and functions may change when <a class="el" href="a00138.php#gaac5bc1f46f55e10ef0141a68ce70e21f" title="Current component and plugin ABI version (see hwloc/plugins.h)">HWLOC_COMPONENT_ABI</a> is modified. </dd></dl>
<h2 class="groupheader">Macro Definition Documentation</h2>
<a id="ga3e48b6ac00ed6a40aea975e23eddcdbb" name="ga3e48b6ac00ed6a40aea975e23eddcdbb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga3e48b6ac00ed6a40aea975e23eddcdbb">&#9670;&#160;</a></span>HWLOC_SHOW_ALL_ERRORS</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define HWLOC_SHOW_ALL_ERRORS</td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td>&#160;&#160;&#160;(<a class="el" href="a00188.php#gab527c1e0f243f057d31a724794ad9f88">hwloc_hide_errors</a>() == 0)</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="gafce07a2a959190a6c7126b321bef202f" name="gafce07a2a959190a6c7126b321bef202f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gafce07a2a959190a6c7126b321bef202f">&#9670;&#160;</a></span>HWLOC_SHOW_CRITICAL_ERRORS</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define HWLOC_SHOW_CRITICAL_ERRORS</td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td>&#160;&#160;&#160;(<a class="el" href="a00188.php#gab527c1e0f243f057d31a724794ad9f88">hwloc_hide_errors</a>() &lt; 2)</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Function Documentation</h2>
<a id="ga1e105cfe3c8e77f34cc6df3841deebbc" name="ga1e105cfe3c8e77f34cc6df3841deebbc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga1e105cfe3c8e77f34cc6df3841deebbc">&#9670;&#160;</a></span>hwloc__insert_object_by_cpuset()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="a00141.php#ga79b8ab56877ef99ac59b833203391c7d">hwloc_obj_t</a> hwloc__insert_object_by_cpuset </td>
          <td>(</td>
          <td class="paramtype">struct hwloc_topology *&#160;</td>
          <td class="paramname"><em>topology</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="a00141.php#ga79b8ab56877ef99ac59b833203391c7d">hwloc_obj_t</a>&#160;</td>
          <td class="paramname"><em>root</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="a00141.php#ga79b8ab56877ef99ac59b833203391c7d">hwloc_obj_t</a>&#160;</td>
          <td class="paramname"><em>obj</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>reason</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Add an object to the topology. </p>
<p>Insert new object <code>obj</code> in the topology starting under existing object <code>root</code> (if <code>NULL</code>, the topology root object is used).</p>
<p>It is sorted along the tree of other objects according to the inclusion of cpusets, to eventually be added as a child of the smallest object including this object.</p>
<p>If the cpuset is empty, the type of the object (and maybe some attributes) must be enough to find where to insert the object. This is especially true for NUMA nodes with memory and no CPUs.</p>
<p>The given object should not have children.</p>
<p>This shall only be called before levels are built.</p>
<p>The caller should check whether the object type is filtered-out before calling this function.</p>
<p>The topology cpuset/nodesets will be enlarged to include the object sets.</p>
<p><code>reason</code> is a unique string identifying where and why this insertion call was performed (it will be displayed in case of internal insertion error).</p>
<p>Returns the object on success. Returns NULL and frees obj on error. Returns another object and frees obj if it was merged with an identical pre-existing object. </p>

</div>
</div>
<a id="ga0b5c75b2dc37cea2e8a29c4812baf4b3" name="ga0b5c75b2dc37cea2e8a29c4812baf4b3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga0b5c75b2dc37cea2e8a29c4812baf4b3">&#9670;&#160;</a></span>hwloc_alloc_setup_object()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="a00141.php#ga79b8ab56877ef99ac59b833203391c7d">hwloc_obj_t</a> hwloc_alloc_setup_object </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="a00142.php#ga9d1e76ee15a7dee158b786c30b6a6e38">hwloc_topology_t</a>&#160;</td>
          <td class="paramname"><em>topology</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="a00140.php#gacd37bb612667dc437d66bfb175a8dc55">hwloc_obj_type_t</a>&#160;</td>
          <td class="paramname"><em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>os_index</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Allocate and initialize an object of the given type and physical index. </p>
<p>If <code>os_index</code> is unknown or irrelevant, use <code>HWLOC_UNKNOWN_INDEX</code>. </p>

</div>
</div>
<a id="gab527c1e0f243f057d31a724794ad9f88" name="gab527c1e0f243f057d31a724794ad9f88"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gab527c1e0f243f057d31a724794ad9f88">&#9670;&#160;</a></span>hwloc_hide_errors()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int hwloc_hide_errors </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Check whether error messages are hidden. </p>
<p>Callers should print critical error messages (e.g. invalid hw topo info, invalid config) only if this function returns strictly less than 2.</p>
<p>Callers should print non-critical error messages (e.g. failure to initialize CUDA) if this function returns 0.</p>
<p>This function return 1 by default (show critical only), 0 in lstopo (show all), or anything set in HWLOC_HIDE_ERRORS in the environment.</p>
<p>Use macros <a class="el" href="a00188.php#gafce07a2a959190a6c7126b321bef202f">HWLOC_SHOW_CRITICAL_ERRORS()</a> and <a class="el" href="a00188.php#ga3e48b6ac00ed6a40aea975e23eddcdbb">HWLOC_SHOW_ALL_ERRORS()</a> for clarity. </p>

</div>
</div>
<a id="ga0ef97debde503b56367689b07bb3e901" name="ga0ef97debde503b56367689b07bb3e901"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga0ef97debde503b56367689b07bb3e901">&#9670;&#160;</a></span>hwloc_insert_object_by_parent()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void hwloc_insert_object_by_parent </td>
          <td>(</td>
          <td class="paramtype">struct hwloc_topology *&#160;</td>
          <td class="paramname"><em>topology</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="a00141.php#ga79b8ab56877ef99ac59b833203391c7d">hwloc_obj_t</a>&#160;</td>
          <td class="paramname"><em>parent</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="a00141.php#ga79b8ab56877ef99ac59b833203391c7d">hwloc_obj_t</a>&#160;</td>
          <td class="paramname"><em>obj</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Insert an object somewhere in the topology. </p>
<p>It is added as the last child of the given parent. The cpuset is completely ignored, so strange objects such as I/O devices should preferably be inserted with this.</p>
<p>When used for "normal" children with cpusets (when importing from XML when duplicating a topology), the caller should make sure that:</p><ul>
<li>children are inserted in order,</li>
<li>children cpusets do not intersect.</li>
</ul>
<p>The given object may have normal, I/O or Misc children, as long as they are in order as well. These children must have valid parent and next_sibling pointers.</p>
<p>The caller should check whether the object type is filtered-out before calling this function. </p>

</div>
</div>
<a id="ga754b61041ceee9685534a2c5d3cd0156" name="ga754b61041ceee9685534a2c5d3cd0156"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga754b61041ceee9685534a2c5d3cd0156">&#9670;&#160;</a></span>hwloc_obj_add_children_sets()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int hwloc_obj_add_children_sets </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="a00141.php#ga79b8ab56877ef99ac59b833203391c7d">hwloc_obj_t</a>&#160;</td>
          <td class="paramname"><em>obj</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Setup object cpusets/nodesets by OR'ing its children. </p>
<p>Used when adding an object late in the topology. Will update the new object by OR'ing all its new children sets.</p>
<p>Used when PCI backend adds a hostbridge parent, when distances add a new Group, etc. </p>

</div>
</div>
<a id="ga120d8bd74922e1030b621409a6b0be61" name="ga120d8bd74922e1030b621409a6b0be61"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga120d8bd74922e1030b621409a6b0be61">&#9670;&#160;</a></span>hwloc_topology_reconnect()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int hwloc_topology_reconnect </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="a00142.php#ga9d1e76ee15a7dee158b786c30b6a6e38">hwloc_topology_t</a>&#160;</td>
          <td class="paramname"><em>topology</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned long&#160;</td>
          <td class="paramname"><em>flags</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Request a reconnection of children and levels in the topology. </p>
<p>May be used by backends during discovery if they need arrays or lists of object within levels or children to be fully connected.</p>
<p><code>flags</code> is currently unused, must 0. </p>

</div>
</div>
</div><!-- contents -->
<?php
include_once("$topdir/includes/footer.inc");
