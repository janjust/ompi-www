<?php
$topdir = "../../../..";
# Note that we must use the PHP "$$" indirection to assign to the
# "title" variable, because if we list "$ title" (without the space)
# in this file, Doxygen will replace it with a string title.
$ver = basename(getcwd());
$thwarting_doxygen_preprocessor = "title";
$$thwarting_doxygen_preprocessor = "Portable Hardware Locality (hwloc) Documentation: $ver";
$header_include_file = "$topdir/projects/hwloc/doc/$ver/www.open-mpi.org-css.inc";
include_once("$topdir/projects/hwloc/nav.inc");
include_once("$topdir/includes/header.inc");
include_once("$topdir/includes/code.inc");
?>
<!-- Generated by Doxygen 1.9.8 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',false,false,'search.php','Search');
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div><div class="header">
  <div class="headertitle"><div class="title">CPU and Memory Binding Overview</div></div>
</div><!--header-->
<div class="contents">
<div class="textblock"><p>Binding tasks and data buffers is hwloc's second main goal after discovering and exposing the hardware topology. hwloc defines APIs to bind threads and processes to cores and processing units (see <a class="el" href="a00146.php">CPU binding</a>), and to bind memory buffers to NUMA nodes (see <a class="el" href="a00147.php">Memory binding</a>). Some examples are available under doc/examples/ in the source tree.</p>
<p>Sections below provide high-level insights on how these APIs work.</p>
<h1><a class="anchor" id="cpu_mem_bind_portability"></a>
Binding Policies and Portability</h1>
<p>hwloc binding APIs are portable to multiple operating systems. However operating systems sometimes define slightly different policies, which means hwloc's behavior might slightly differ.</p>
<p>On the CPU binding side, OSes have different constraints of which sets of PUs can be used for binding (only full cores, random sets of PUs, etc.). Moreover the <a class="el" href="a00146.php#gga217dc8d373f8958cc93c154ebce1c71ca679a7e0f0c7ee06b123565f90d98e7fa" title="Request for strict binding from the OS.">HWLOC_CPUBIND_STRICT</a> may be given to clarify what to do in some corner cases. It is recommended to read <a class="el" href="a00146.php">CPU binding</a> for details.</p>
<p>On the memory binding side, things are more complicated. First, there are multiple API for binding existing memory buffers, allocating new ones, etc. Second, multiple policies exist (first-touch, bind, interleave, etc.) but some of them are not implemented by all operating systems. Third, some of these policies have slightly different meanings. For instance, hwloc's <b>bind</b> (<a class="el" href="a00147.php#ggac9764f79505775d06407b40f5e4661e8ad811fa4b2a6002c4d63695a408ffde2c" title="Allocate memory on the specified nodes.">HWLOC_MEMBIND_BIND</a>) uses Linux' <b>MPOL_PREFERRED_MANY</b> (or <b>MPOL_PREFERRED</b>) by default, but it switches to <b>MPOL_BIND</b> when strict binding is requested (<a class="el" href="a00147.php#ggab00475fd98815bf4fb9aaf752030e7d2a0335311a0ee04166df2888d52b4a42c6">HWLOC_MEMBIND_STRICT</a>). Reading <a class="el" href="a00147.php">Memory binding</a> is strongly recommended.</p>
<h1><a class="anchor" id="cpu_mem_bind_joint"></a>
Joint CPU and Memory Binding (or not)</h1>
<p>Some operating systems do not systematically provide separate functions for CPU and memory binding. This means that CPU binding functions may have have effects on the memory binding policy. Likewise, changing the memory binding policy may change the CPU binding of the current thread. This is often not a problem for applications, so by default hwloc will make use of these functions when they provide better binding support.</p>
<p>If the application does not want the CPU binding to change when changing the memory policy, it needs to use the <a class="el" href="a00147.php#ggab00475fd98815bf4fb9aaf752030e7d2aad6b9eaf2ee324ca58dc8f58094b9997" title="Avoid any effect on CPU binding.">HWLOC_MEMBIND_NOCPUBIND</a> flag to prevent hwloc from using OS functions which would change the CPU binding. Additionally, <a class="el" href="a00146.php#gga217dc8d373f8958cc93c154ebce1c71ca41ce440443cc3087caed95ab60edcad6" title="Avoid any effect on memory binding.">HWLOC_CPUBIND_NOMEMBIND</a> can be passed to CPU binding function to prevent hwloc from using OS functions would change the memory binding policy. Of course, using these flags will reduce hwloc's overall support for binding, so their use is discouraged.</p>
<p>One can avoid using these flags but still closely control both memory and CPU binding by allocating memory, touching each page in the allocated memory, and then changing the CPU binding. The already-really-allocated memory will then be "locked" to physical memory and will not be migrated. Thus, even if the memory binding policy gets changed by the CPU binding order, the already-allocated memory will not change with it. When binding and allocating further memory, the CPU binding should be performed again in case the memory binding altered the previously-selected CPU binding.</p>
<h1><a class="anchor" id="cpu_mem_bind_current_membind"></a>
Current Memory Binding Policy</h1>
<p>Not all operating systems support the notion of a "current" memory binding policy for the current process, but such operating systems often still provide a way to allocate data on a given node set. Conversely, some operating systems support the notion of a "current" memory binding policy and do not permit allocating data on a specific node set without changing the current policy and allocate the data. To provide the most powerful coverage of these facilities, hwloc provides:</p>
<ul>
<li>
functions that set/get the current memory binding policies (if supported): <a class="el" href="a00147.php#ga020951efa0ce3862bd4faec295501a7f" title="Set the default memory binding policy of the current process or thread to prefer the NUMA node(s) spe...">hwloc_set_membind()</a>, <a class="el" href="a00147.php#gae21f0a1a884929c784bebf070252aa56" title="Query the default memory binding policy and physical locality of the current process or thread.">hwloc_get_membind()</a>, <a class="el" href="a00147.php#gabc91ff16f7e41047924e3a4ae6d9da7e" title="Set the default memory binding policy of the specified process to prefer the NUMA node(s) specified b...">hwloc_set_proc_membind()</a> and <a class="el" href="a00147.php#ga1730ceb18ec6ee3b7bd3d0db81f07dc8" title="Query the default memory binding policy and physical locality of the specified process.">hwloc_get_proc_membind()</a> </li>
<li>
a function that allocates memory bound to specific node set without changing the current memory binding policy (if supported): <a class="el" href="a00147.php#gadf87089ef533db40460ccc24b5bc0d65" title="Allocate some memory on NUMA memory nodes specified by set.">hwloc_alloc_membind()</a>. </li>
<li>
a helper which, if needed, changes the current memory binding policy of the process in order to obtain memory binding: <a class="el" href="a00147.php#ga64e5f75165ea52930f67b17ef4aed2e8" title="Allocate some memory on NUMA memory nodes specified by set.">hwloc_alloc_membind_policy()</a>. </li>
</ul>
<p>An application can thus use the two first sets of functions if it wants to manage separately the global process binding policy and directed allocation, or use the third set of functions if it does not care about the process memory binding policy. Again, reading <a class="el" href="a00147.php">Memory binding</a> is strongly recommended. </p>
</div></div><!-- contents -->
</div><!-- PageDoc -->
<?php
include_once("$topdir/includes/footer.inc");
