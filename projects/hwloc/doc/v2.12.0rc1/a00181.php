<?php
$topdir = "../../../..";
# Note that we must use the PHP "$$" indirection to assign to the
# "title" variable, because if we list "$ title" (without the space)
# in this file, Doxygen will replace it with a string title.
$ver = basename(getcwd());
$thwarting_doxygen_preprocessor = "title";
$$thwarting_doxygen_preprocessor = "Portable Hardware Locality (hwloc) Documentation: $ver";
$header_include_file = "$topdir/projects/hwloc/doc/$ver/www.open-mpi.org-css.inc";
include_once("$topdir/projects/hwloc/nav.inc");
include_once("$topdir/includes/header.inc");
include_once("$topdir/includes/code.inc");
?>
<!-- Generated by Doxygen 1.9.8 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',false,false,'search.php','Search');
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle"><div class="title">Interoperability with the oneAPI Level Zero interface.</div></div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="func-members" name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:ga66281a9ba621357b1c7070b4fa19b5b8" id="r_ga66281a9ba621357b1c7070b4fa19b5b8"><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00181.php#ga66281a9ba621357b1c7070b4fa19b5b8">hwloc_levelzero_get_device_cpuset</a> (<a class="el" href="a00142.php#ga9d1e76ee15a7dee158b786c30b6a6e38">hwloc_topology_t</a> topology, ze_device_handle_t device, <a class="el" href="a00139.php#ga4bbf39b68b6f568fb92739e7c0ea7801">hwloc_cpuset_t</a> set)</td></tr>
<tr class="separator:ga66281a9ba621357b1c7070b4fa19b5b8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6b12d19e54b2d0ba4800108122d80d1f" id="r_ga6b12d19e54b2d0ba4800108122d80d1f"><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00181.php#ga6b12d19e54b2d0ba4800108122d80d1f">hwloc_levelzero_get_sysman_device_cpuset</a> (<a class="el" href="a00142.php#ga9d1e76ee15a7dee158b786c30b6a6e38">hwloc_topology_t</a> topology, zes_device_handle_t device, <a class="el" href="a00139.php#ga4bbf39b68b6f568fb92739e7c0ea7801">hwloc_cpuset_t</a> set)</td></tr>
<tr class="separator:ga6b12d19e54b2d0ba4800108122d80d1f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf06cb737abcd2dc6db894c8914302d85" id="r_gaf06cb737abcd2dc6db894c8914302d85"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="a00141.php#ga79b8ab56877ef99ac59b833203391c7d">hwloc_obj_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00181.php#gaf06cb737abcd2dc6db894c8914302d85">hwloc_levelzero_get_device_osdev</a> (<a class="el" href="a00142.php#ga9d1e76ee15a7dee158b786c30b6a6e38">hwloc_topology_t</a> topology, ze_device_handle_t device)</td></tr>
<tr class="separator:gaf06cb737abcd2dc6db894c8914302d85"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga817f3e18350306344a8c1715be95ab22" id="r_ga817f3e18350306344a8c1715be95ab22"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="a00141.php#ga79b8ab56877ef99ac59b833203391c7d">hwloc_obj_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00181.php#ga817f3e18350306344a8c1715be95ab22">hwloc_levelzero_get_sysman_device_osdev</a> (<a class="el" href="a00142.php#ga9d1e76ee15a7dee158b786c30b6a6e38">hwloc_topology_t</a> topology, zes_device_handle_t device)</td></tr>
<tr class="separator:ga817f3e18350306344a8c1715be95ab22"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<p>This interface offers ways to retrieve topology information about devices managed by the Level Zero API, both for main Core devices (ZE API) and the Sysman devices (ZES API). </p>
<h2 class="groupheader">Function Documentation</h2>
<a id="ga66281a9ba621357b1c7070b4fa19b5b8" name="ga66281a9ba621357b1c7070b4fa19b5b8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga66281a9ba621357b1c7070b4fa19b5b8">&#9670;&#160;</a></span>hwloc_levelzero_get_device_cpuset()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static int hwloc_levelzero_get_device_cpuset </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="a00142.php#ga9d1e76ee15a7dee158b786c30b6a6e38">hwloc_topology_t</a>&#160;</td>
          <td class="paramname"><em>topology</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ze_device_handle_t&#160;</td>
          <td class="paramname"><em>device</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="a00139.php#ga4bbf39b68b6f568fb92739e7c0ea7801">hwloc_cpuset_t</a>&#160;</td>
          <td class="paramname"><em>set</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the CPU set of logical processors that are physically close to the Level Zero device <code>device</code>. </p>
<p>Store in <code>set</code> the CPU-set describing the locality of the Level Zero device <code>device</code>.</p>
<p>Topology <code>topology</code> and device <code>device</code> must match the local machine. The Level Zero library must have been initialized with zeInit(). I/O devices detection and the Level Zero component are not needed in the topology.</p>
<p>The function only returns the locality of the device. If more information about the device is needed, OS objects should be used instead, see <a class="el" href="a00181.php#gaf06cb737abcd2dc6db894c8914302d85" title="Get the hwloc OS device object corresponding to Level Zero device device.">hwloc_levelzero_get_device_osdev()</a>.</p>
<p>This function is currently only implemented in a meaningful way for Linux; other systems will simply get a full cpuset.</p>
<dl class="section return"><dt>Returns</dt><dd>0 on success. </dd>
<dd>
-1 on error, for instance if device information could not be found.</dd></dl>
<dl class="section note"><dt>Note</dt><dd>zeDevicePciGetPropertiesExt() must be supported, or the entire machine locality will be returned. </dd></dl>

</div>
</div>
<a id="gaf06cb737abcd2dc6db894c8914302d85" name="gaf06cb737abcd2dc6db894c8914302d85"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaf06cb737abcd2dc6db894c8914302d85">&#9670;&#160;</a></span>hwloc_levelzero_get_device_osdev()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="a00141.php#ga79b8ab56877ef99ac59b833203391c7d">hwloc_obj_t</a> hwloc_levelzero_get_device_osdev </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="a00142.php#ga9d1e76ee15a7dee158b786c30b6a6e38">hwloc_topology_t</a>&#160;</td>
          <td class="paramname"><em>topology</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ze_device_handle_t&#160;</td>
          <td class="paramname"><em>device</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the hwloc OS device object corresponding to Level Zero device <code>device</code>. </p>
<dl class="section return"><dt>Returns</dt><dd>The hwloc OS device object that describes the given Level Zero device <code>device</code>. </dd>
<dd>
<code>NULL</code> if none could be found.</dd></dl>
<p>Topology <code>topology</code> and device <code>dv_ind</code> must match the local machine. The Level Zero library must have been initialized with zeInit(). I/O devices detection and the Level Zero component must be enabled in the topology. If not, the locality of the object may still be found using <a class="el" href="a00181.php#ga66281a9ba621357b1c7070b4fa19b5b8" title="Get the CPU set of logical processors that are physically close to the Level Zero device device.">hwloc_levelzero_get_device_cpuset()</a>.</p>
<dl class="section note"><dt>Note</dt><dd>If the input ZE device is actually a subdevice, then its parent (root device) is actually translated, i.e. the main hwloc OS device is returned instead of one of its children.</dd>
<dd>
The corresponding hwloc PCI device may be found by looking at the result parent pointer (unless PCI devices are filtered out).</dd>
<dd>
zeDevicePciGetPropertiesExt() must be supported. </dd></dl>

</div>
</div>
<a id="ga6b12d19e54b2d0ba4800108122d80d1f" name="ga6b12d19e54b2d0ba4800108122d80d1f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga6b12d19e54b2d0ba4800108122d80d1f">&#9670;&#160;</a></span>hwloc_levelzero_get_sysman_device_cpuset()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static int hwloc_levelzero_get_sysman_device_cpuset </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="a00142.php#ga9d1e76ee15a7dee158b786c30b6a6e38">hwloc_topology_t</a>&#160;</td>
          <td class="paramname"><em>topology</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">zes_device_handle_t&#160;</td>
          <td class="paramname"><em>device</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="a00139.php#ga4bbf39b68b6f568fb92739e7c0ea7801">hwloc_cpuset_t</a>&#160;</td>
          <td class="paramname"><em>set</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the CPU set of logical processors that are physically close to the Level Zero Sysman device <code>device</code>. </p>
<p>Store in <code>set</code> the CPU-set describing the locality of the Level Zero device <code>device</code>.</p>
<p>Topology <code>topology</code> and device <code>device</code> must match the local machine. The Level Zero library must have been initialized with Sysman enabled with zesInit(). I/O devices detection and the Level Zero component are not needed in the topology.</p>
<p>The function only returns the locality of the device. If more information about the device is needed, OS objects should be used instead, see <a class="el" href="a00181.php#gaf06cb737abcd2dc6db894c8914302d85" title="Get the hwloc OS device object corresponding to Level Zero device device.">hwloc_levelzero_get_device_osdev()</a>.</p>
<p>This function is currently only implemented in a meaningful way for Linux; other systems will simply get a full cpuset.</p>
<dl class="section return"><dt>Returns</dt><dd>0 on success. </dd>
<dd>
-1 on error, for instance if device information could not be found. </dd></dl>

</div>
</div>
<a id="ga817f3e18350306344a8c1715be95ab22" name="ga817f3e18350306344a8c1715be95ab22"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga817f3e18350306344a8c1715be95ab22">&#9670;&#160;</a></span>hwloc_levelzero_get_sysman_device_osdev()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="a00141.php#ga79b8ab56877ef99ac59b833203391c7d">hwloc_obj_t</a> hwloc_levelzero_get_sysman_device_osdev </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="a00142.php#ga9d1e76ee15a7dee158b786c30b6a6e38">hwloc_topology_t</a>&#160;</td>
          <td class="paramname"><em>topology</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">zes_device_handle_t&#160;</td>
          <td class="paramname"><em>device</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the hwloc OS device object corresponding to Level Zero Sysman device <code>device</code>. </p>
<dl class="section return"><dt>Returns</dt><dd>The hwloc OS device object that describes the given Level Zero device <code>device</code>. </dd>
<dd>
<code>NULL</code> if none could be found.</dd></dl>
<p>Topology <code>topology</code> and device <code>dv_ind</code> must match the local machine. The Level Zero library must have been initialized with Sysman enabled with zesInit(). I/O devices detection and the Level Zero component must be enabled in the topology. If not, the locality of the object may still be found using <a class="el" href="a00181.php#ga66281a9ba621357b1c7070b4fa19b5b8" title="Get the CPU set of logical processors that are physically close to the Level Zero device device.">hwloc_levelzero_get_device_cpuset()</a>.</p>
<dl class="section note"><dt>Note</dt><dd>If the input ZES device is actually a subdevice, then its parent (root device) is actually translated, i.e. the main hwloc OS device is returned instead of one of its children.</dd>
<dd>
The corresponding hwloc PCI device may be found by looking at the result parent pointer (unless PCI devices are filtered out). </dd></dl>

</div>
</div>
</div><!-- contents -->
<?php
include_once("$topdir/includes/footer.inc");
